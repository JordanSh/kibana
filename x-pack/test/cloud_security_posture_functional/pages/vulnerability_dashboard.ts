/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

import expect from '@kbn/expect';
import type { FtrProviderContext } from '../ftr_provider_context';
import { vulnerabilitiesLatestMock } from '../mocks/vulnerabilities_latest_mock';

// eslint-disable-next-line import/no-default-export
export default function ({ getPageObjects, getService }: FtrProviderContext) {
  const retry = getService('retry');
  const pageObjects = getPageObjects(['common', 'vulnerabilityDashboard']);

  describe('Vulnerability Dashboard Page', function () {
    this.tags(['cloud_security_vulnerability_dashboard']);

    let navigateToVulnerabilityDashboardPage: typeof pageObjects.vulnerabilityDashboard.navigateToVulnerabilityDashboardPage;
    let waitForPluginInitialized: typeof pageObjects.vulnerabilityDashboard.waitForPluginInitialized;
    let index: typeof pageObjects.vulnerabilityDashboard.index;
    let dashboard: typeof pageObjects.vulnerabilityDashboard.dashboard;

    before(async () => {
      navigateToVulnerabilityDashboardPage =
        pageObjects.vulnerabilityDashboard.navigateToVulnerabilityDashboardPage;
      waitForPluginInitialized = pageObjects.vulnerabilityDashboard.waitForPluginInitialized;
      index = pageObjects.vulnerabilityDashboard.index;
      dashboard = pageObjects.vulnerabilityDashboard.dashboard;

      await waitForPluginInitialized();

      await index.addFindings(vulnerabilitiesLatestMock);
      await navigateToVulnerabilityDashboardPage();
      await retry.waitFor(
        'Vulnerability dashboard to be displayed',
        async () => !!dashboard.getDashboardPageHeader()
      );
    });

    after(async () => {
      await index.removeFindings();
    });

    describe('Vulnerability Dashboard', () => {
      it('Renders Accurate Data', async () => {
        const vulnPageHeader = await dashboard.getDashboardPageHeader();
        const criticalStat = await dashboard.getCriticalStat();
        const highStat = await dashboard.getHighStat();
        const mediumStat = await dashboard.getMediumStat();

        expect(
          (await vulnPageHeader.getVisibleText()) === 'Cloud Native Vulnerability Management'
        ).to.be(true);
        expect((await criticalStat.getVisibleText()) === '1').to.equal(true);
        expect((await highStat.getVisibleText()) === '1').to.equal(true);
        expect((await mediumStat.getVisibleText()) === '0').to.equal(true);
      });
    });
  });
}
