/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

import expect from '@kbn/expect';
import { ELASTIC_HTTP_VERSION_HEADER } from '@kbn/core-http-common';
import type { FtrProviderContext } from '../ftr_provider_context';

const VULNERABILITIES_LATEST_INDEX = 'logs-cloud_security_posture.vulnerabilities_latest-default';
const BENCHMARK_SCORES_INDEX = 'logs-cloud_security_posture.scores-default';

export function VulnerabilityDashboardPageProvider({ getService }: FtrProviderContext) {
  const retry = getService('retry');
  const es = getService('es');
  const supertest = getService('supertest');
  const log = getService('log');
  const testSubjects = getService('testSubjects');

  /**
   * required before indexing findings
   */
  const waitForPluginInitialized = (): Promise<void> =>
    retry.try(async () => {
      log.debug('Check CSP plugin is initialized');
      const response = await supertest
        .get('/internal/cloud_security_posture/status?check=init')
        .set(ELASTIC_HTTP_VERSION_HEADER, '1')
        .expect(200);
      expect(response.body).to.eql({ isPluginInitialized: true });
      log.debug('CSP plugin is initialized');
    });

  const index = {
    removeFindings: async () =>
      es.deleteByQuery({
        index: VULNERABILITIES_LATEST_INDEX,
        query: { match_all: {} },
        refresh: true,
      }),

    removeScores: async () =>
      es.deleteByQuery({
        index: BENCHMARK_SCORES_INDEX,
        query: { match_all: {} },
        refresh: true,
      }),

    deleteFindingsIndex: async () => {
      const indexExists = await es.indices.exists({ index: VULNERABILITIES_LATEST_INDEX });

      if (indexExists) {
        await es.indices.delete({ index: VULNERABILITIES_LATEST_INDEX });
      }
    },

    addFindings: async <T>(vulnerabilitiesMock: T[]) => {
      await Promise.all(
        vulnerabilitiesMock.map((vulnerabilityDoc) =>
          es.index({
            index: VULNERABILITIES_LATEST_INDEX,
            body: vulnerabilityDoc,
          })
        )
      );
    },

    addScores: async <T>(scoresMock: T[]) => {
      await Promise.all(
        scoresMock.map((scoreDoc) =>
          es.index({
            index: BENCHMARK_SCORES_INDEX,
            body: scoreDoc,
          })
        )
      );
    },
  };

  const dashboard = {
    getDashboardPageHeader: () => testSubjects.find('vulnerability-dashboard-page-header'),
    //
    // getDashboardTabs: async () => {
    //   await PageObjects.header.waitUntilLoadingHasFinished();
    //   const dashboardPageHeader = await dashboard.getDashboardPageHeader();
    //   return await dashboardPageHeader.findByClassName('euiTabs');
    // },
    //
    // getCloudTab: async () => {
    //   const tabs = await dashboard.getDashboardTabs();
    //   return await tabs.findByXpath(`//span[text()="Cloud"]`);
    // },
    //
    // getKubernetesTab: async () => {
    //   const tabs = await dashboard.getDashboardTabs();
    //   return await tabs.findByXpath(`//span[text()="Kubernetes"]`);
    // },
    //
    // clickTab: async (tab: 'Cloud' | 'Kubernetes') => {
    //   if (tab === 'Cloud') {
    //     const cloudTab = await dashboard.getCloudTab();
    //     await cloudTab.click();
    //   }
    //   if (tab === 'Kubernetes') {
    //     const k8sTab = await dashboard.getKubernetesTab();
    //     await k8sTab.click();
    //   }
    // },
    //
    // getIntegrationDashboardContainer: () => testSubjects.find('dashboard-container'),
    //
    // // Cloud Dashboard
    //
    // getCloudDashboard: async () => {
    //   await dashboard.clickTab('Cloud');
    //   return await testSubjects.find('cloud-dashboard-container');
    // },
    //
    // getCloudSummarySection: async () => {
    //   await dashboard.getCloudDashboard();
    //   return await testSubjects.find('dashboard-summary-section');
    // },
    //
    // getCloudComplianceScore: async () => {
    //   await dashboard.getCloudSummarySection();
    //   return await testSubjects.find('dashboard-summary-section-compliance-score');
    // },
    //
    // // Kubernetes Dashboard
    //
    // getKubernetesDashboard: async () => {
    //   await dashboard.clickTab('Kubernetes');
    //   return await testSubjects.find('kubernetes-dashboard-container');
    // },
    //
    // getKubernetesSummarySection: async () => {
    //   await dashboard.getKubernetesDashboard();
    //   return await testSubjects.find('dashboard-summary-section');
    // },
    //
    // getKubernetesComplianceScore: async () => {
    //   await dashboard.getKubernetesSummarySection();
    //   return await testSubjects.find('dashboard-summary-section-compliance-score');
    // },
  };

  return {
    waitForPluginInitialized,
    index,
    dashboard,
  };
}
